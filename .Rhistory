map(., function(x) paste(x, collapse=""))
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
df<-data.frame(titles, dates, origin, text)
return(df)
}
extractMeta(out)
test<-extractMeta(out)
glimpse(test)
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text)
return(df)
}
test<-extractMeta(out)
glimpse(test)
?regex
getFullText <- function(x){
start <- grep('Full [Tt]ext:', x)
end <- grep('^[:alpha:]+: ', x)
end <- end[which(end > start)[1]] - 1
x[start:end]
}
#Take out Full text:
?str_remove_all
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse="")) %>%
map(., function(x) str_remove_all(x, "Full [Tt]ext: "))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text)
return(df)
}
extractMeta(out)
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text)
return(df)
}
extractMeta(out)
getFullText <- function(x){
start <- grep('Full [Tt]ext:', x)
end <- grep('^[:alpha:]+:', x)
end <- end[which(end > start)[1]] - 1
x[start:end]
}
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text)
return(df)
}
extractMeta(out)
getFullText <- function(x){
start <- grep('Full [Tt]ext:', x)
end <- grep('[:alpha:]+:', x)
end <- end[which(end > start)[1]] - 1
x[start:end]
}
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text)
return(df)
}
extractMeta(out)
getFullText <- function(x){
start <- grep('Full [Tt]ext:', x)
end <- grep(':', x)
end <- end[which(end > start)[1]] - 1
x[start:end]
}
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text)
return(df)
}
extractMeta(out)
getID <- function(x){
id<-as.numeric(gsub('ProQuest document ID: ', '', grep('^^ProQuest document ID:', x, value=TRUE)))
}
getSection <- function(x){
section<-gsub('Section: ', '', grep('^Section: ', x, value=TRUE))
}
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run to get section
section<-map(y, getSection)
section<-reduce(origin,c)
#Run to get ProQuestID
id<-map(y, getID)
id<-reduce(origin,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text, section, ID)
return(df)
}
extractMeta(out)
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run to get section
section<-map(y, getSection)
section<-reduce(origin,c)
#Run to get ProQuestID
ID<-map(y, getID)
ID<-reduce(ID,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text, section, ID)
return(df)
}
extractMeta(out)
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run to get section
section<-map(y, getSection)
section<-reduce(origin,c)
#Run to get ProQuestID
ID<-map(y, getID)
ID<-reduce(ID,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text, section)
return(df)
}
extractMeta(out)
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run to get section
section<-map(y, getSection)
section<-reduce(origin,c)
#Run to get ProQuestID
ID<-map(y, getID)
ID<-reduce(ID,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text, section)
return(df)
}
test<-extractMeta(out)
summary(test)
out %>%
map(., getID)
out %>%
map(., getID) %>%
str()
out %>%
map(., getID)->ids
ids[[6]]
out %>%
map(., getID) %>%
View()
ids[[7]]
out[[7]]
getID <- function(x){
id<-as.numeric(gsub('ProQuest document ID: ', '', grep('^ProQuest document', x, value=TRUE)))
}
out[[7]]
getID <- function(x){
id<-as.numeric(gsub('ProQuest document ID: |ProQuest documentID', '', grep('^ProQuest document', x, value=TRUE)))
}
extractMeta<-function(y){
#Make data frame to poplate
#df<-data.frame()
#Run getDate to get dates
dates<-map(y, getDate)
dates<-reduce(dates,c)
#Run getTitle to get Title
titles<-map(y, getTitle)
titles<-reduce(titles,c)
#Run Publication Title to get Publication Title
origin<-map(y, getPublication)
origin<-reduce(origin,c)
#Run to get section
section<-map(y, getSection)
section<-reduce(origin,c)
#Run to get ProQuestID
ID<-map(y, getID)
ID<-reduce(ID,c)
#Run get full text
text<-map(y, getFullText) %>%
map(., function(x) paste(x, collapse=""))
text<-reduce(text,c)
df<-data.frame(titles, dates, origin, text, section, ID)
return(df)
}
test<-extractMeta(out)
glimpse(test)
library(tm)
library(quanteda)
corpus(test, text_field=text)
corpus(test, text_field="text")
star_corpus<-corpus(test, text_field="text")
prepare <- function(path="path_name") {
content<-readLines(path)
#Delete Superfluouous content
content <- content[1:(length(content) - 6)]
content<-content[grep("^Links:", content, invert=T)]
content<-content[grep("^https:", content, invert=T)]
content<-content[grep("^Abstract:", content, invert=T)]
content<-content[grep("^Language of", content, invert=T)]
content<-content[grep("^Document URL:", content, invert=T)]
content<-content[grep("^Copyright:", content, invert=T)]
content<-content[grep("^Last updated", content, invert=T)]
content<-content[grep("^Database:", content, invert=T)]
content<-content[grep("^Subject:", content, invert=T)]
content<-content[grep("^Publication info:", content, invert=T)]
content<-content[grep("^CAPTION:", content, invert=T)]
content<-content[grep("^CREDIT:", content, invert=T)]
content<-content[grep("^Publisher:", content, invert=T)]
content<-content[grep("^Place of:", content, invert=T)]
content<-content[grep("^Publication subject:", content, invert=T)]
content<-content[grep("^ISSN:", content, invert=T)]
content<-content[grep("^Publication year:", content, invert=T)]
content<-content[grep("^First page:", content, invert=T)]
content<-content[grep("^Business indexing:", content, invert=T)]
content<-content[grep("^Country of publication:", content, invert=T)]
content<-content[grep("^Place of publication:", content, invert=T)]
content <- content[grep(".", content)]
content<-content[grep("_______", content, invert=T)+1]
#Split the file at num
num <- cumsum(grepl("______________", content))
content <- split(content, num)
#Run the extract meta data
content<-extractMeta(content)
content
}
test<-prepare(path="inst/star.txt")
test
devtools:::document()
library(usethis)
use_package("purrr")
devtools:::document()
rm(list = c("extractMeta", "getDate", "getFullText", "getID", "getSection", "getTitle", "prepare"))
use_mit_license()
usethis::use_pipe()
devtools::document()
rm(list = c("getPublication"))
devtools::document()
?readLines
use_licence_mit()
usethis::use_licence_mit()
usethis::use_license_mit()
use_liense_mit()
usethis::use_license_mit()
usethis::use_mit_license()
library(ImportProquest)
library(ImportProquest)
prepare
prepare(path="inst/star.txt")
library(ImportProquest)
prepare(path="inst/star.txt")
star<-prepare(path="inst/star.txt")
star<-extractMeta(star)
extractMeta(star)
rlang::last_error()
library(ImportProquest)
star<-prepare(path="inst/star.txt")
extractMeta(star)
?ifelse
library(ImportProquest)
getTitle<-function(x){
#Get any lines that start with Title,
# sub out the
if (any(grepl('^Title: ', x))){
title<-gsub('Title: ', '', grep('^Title: ', x, value=TRUE))
return(title)
} else{
return(NA)
}
}
getTitle
if( any(grepl('^ProQuest document'))){
id<-as.numeric(
gsub('ProQuest document ID: |ProQuest documentID', '',
grep('^ProQuest document', x, value=TRUE)))
}
getID <- function(x){
if( any(grepl('^ProQuest document', x))){
id<-as.numeric(
gsub('ProQuest document ID: |ProQuest documentID', '',
grep('^ProQuest document', x, value=TRUE))) else {
return(NA)
}
}
}
getID <- function(x){
#Introduce an (if condition)
if( any(grepl('^ProQuest document', x))){
id<-as.numeric(
gsub('ProQuest document ID: |ProQuest documentID', '',
grep('^ProQuest document', x, value=TRUE)))
return(id) else {
return(NA)
}
}
}
getID <- function(x){
#Introduce an (if condition)
if( any(grepl('^ProQuest document', x))){
id<-as.numeric(
gsub('ProQuest document ID: |ProQuest documentID', '',
grep('^ProQuest document', x, value=TRUE)))
return(id) else {
return(NA)
}
}
}
getID <- function(x){
#Introduce an (if condition)
if( any(grepl('^ProQuest document', x))){
id<-as.numeric(
gsub('ProQuest document ID: |ProQuest documentID', '',
grep('^ProQuest document', x, value=TRUE)))
return(id) else {
return(NA)
}
}
}
getID <- function(x){
#Introduce an (if condition)
if( any(grepl('^ProQuest document', x))){
id<-as.numeric(
gsub('ProQuest document ID: |ProQuest documentID', '',
grep('^ProQuest document', x, value=TRUE)))
return(id)} else {
return(NA)
}
}
get(D)
getID()
getID
getDate<-function(x){
#Set If() condition
if(any(grepl('^Publication date:', x))) {
datetimestamp<-as.Date(
gsub('Publication date: ', '', grep('^Publication date:', x, value=TRUE)), format="%b %d, %Y")
return(datetimestamp)
} else {
return(NA)
}
}
getPublication<-function(x){
#Set If() condition
if(any(grepl('^Publication title:', x))) {
origin<-gsub('Publication title:', '', grep('^Publication title:', x, value=TRUE))
return(origin) } else{
return(NA)
}
}
getFullText<-function(x){
if(any(grepl('Full [Tt]ext:', x))) {
start <- grep('Full [Tt]ext:', x)
end <- grep(':', x)
end <- end[which(end > start)[1]] - 1
return(x[start:end])
} else {
return(NA)
}
}
getSection<-function(x){
#Set if()
if(any(grepl('^Section:', x))) {
section<-gsub('Section:', '', grep('^Section:', x, value=TRUE))
return(section)
} else{
return(NA)
}
}
library(ImportProquest)
library(ImportProquest)
